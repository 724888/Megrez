// Automatically generated by MegrezCompiler, DO NOT MODIFY!

#include <megrez/basic.h>
#include <megrez/builder.h>
#include <megrez/info.h>
#include <megrez/string.h>
#include <megrez/struct.h>
#include <megrez/vector.h>

namespace benchmark {

enum {
	ENUM_val1 = 0,
	ENUM_val2 = 1,
	ENUM_val3 = 3,
};

inline const char **EnumNamesENUM() {
	static const char *names[] = { "val1", "val2", "", "val3", nullptr };
	return names;
}

inline const char *EnumNameENUM(int e) { return EnumNamesENUM()[e]; }

struct INFO;

class INFO : private megrez::Info {
 public:
	uint8_t field1() const { return GetField<uint8_t>(4, 0); }
	int8_t field2() const { return GetField<int8_t>(6, 0); }
	uint8_t field3() const { return GetField<uint8_t>(8, 0); }
	int16_t field4() const { return GetField<int16_t>(10, 0); }
	uint16_t field5() const { return GetField<uint16_t>(12, 0); }
	int32_t field6() const { return GetField<int32_t>(14, 0); }
	uint32_t field7() const { return GetField<uint32_t>(16, 0); }
	int64_t field8() const { return GetField<int64_t>(18, 0); }
	uint64_t field9() const { return GetField<uint64_t>(20, 0); }
	float field10() const { return GetField<float>(22, 0); }
	double field11() const { return GetField<double>(24, 0); }
	const megrez::String *field12() const { return GetPointer<const megrez::String *>(26); }
	int8_t field13() const { return GetField<int8_t>(28, 0); }
};

struct INFOBuilder {
	megrez::MegrezBuilder &mb_;
	megrez::uofs_t start_;
	void add_field1(uint8_t field1) { mb_.AddElement<uint8_t>(4, field1, 0); }
	void add_field2(int8_t field2) { mb_.AddElement<int8_t>(6, field2, 0); }
	void add_field3(uint8_t field3) { mb_.AddElement<uint8_t>(8, field3, 0); }
	void add_field4(int16_t field4) { mb_.AddElement<int16_t>(10, field4, 0); }
	void add_field5(uint16_t field5) { mb_.AddElement<uint16_t>(12, field5, 0); }
	void add_field6(int32_t field6) { mb_.AddElement<int32_t>(14, field6, 0); }
	void add_field7(uint32_t field7) { mb_.AddElement<uint32_t>(16, field7, 0); }
	void add_field8(int64_t field8) { mb_.AddElement<int64_t>(18, field8, 0); }
	void add_field9(uint64_t field9) { mb_.AddElement<uint64_t>(20, field9, 0); }
	void add_field10(float field10) { mb_.AddElement<float>(22, field10, 0); }
	void add_field11(double field11) { mb_.AddElement<double>(24, field11, 0); }
	void add_field12(megrez::Offset<megrez::String> field12) { mb_.AddOffset(26, field12); }
	void add_field13(int8_t field13) { mb_.AddElement<int8_t>(28, field13, 0); }
	INFOBuilder(megrez::MegrezBuilder &_mb) : mb_(_mb) { start_ = mb_.StartInfo(); }
	megrez::Offset<INFO> Finish() { return megrez::Offset<INFO>(mb_.EndInfo(start_, 13)); }
};

inline megrez::Offset<INFO> CreateINFO(
	  megrez::MegrezBuilder &_mb,
	  uint8_t field1,
	  int8_t field2,
	  uint8_t field3,
	  int16_t field4,
	  uint16_t field5,
	  int32_t field6,
	  uint32_t field7,
	  int64_t field8,
	  uint64_t field9,
	  float field10,
	  double field11,
	  megrez::Offset<megrez::String> field12,
	  int8_t field13) {

	INFOBuilder builder_(_mb);
	builder_.add_field11(field11);
	builder_.add_field9(field9);
	builder_.add_field8(field8);
	builder_.add_field12(field12);
	builder_.add_field10(field10);
	builder_.add_field7(field7);
	builder_.add_field6(field6);
	builder_.add_field5(field5);
	builder_.add_field4(field4);
	builder_.add_field13(field13);
	builder_.add_field3(field3);
	builder_.add_field2(field2);
	builder_.add_field1(field1);
	return builder_.Finish();
}

inline const INFO *GetINFO(const void *buf) { return megrez::GetRoot<INFO>(buf); }

}; // namespace benchmark
